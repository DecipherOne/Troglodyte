/*!**************************************************
* This is the base Object class for the Troglodyte *
* Game Engine (c)DecipherOne Productions 2005      *
* Author: Will (DecipherOne) Canada                *
****************************************************/
#include "PCHEADER.H"


	
float TObject::OnMoveDOWN()
{
	
	yTranslate -= mUnitSize;
	return yTranslate;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::OnMoveUP()
{
	
	yTranslate += mUnitSize;
	return yTranslate;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::OnMoveLEFT()
{
	xTranslate -= mUnitSize;
	return xTranslate;
}


////////////////////////////////////////////////////////////////////////////////////
float TObject::OnMoveRIGHT()
{
	xTranslate += mUnitSize;
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::OnMoveIN()
{
	
	zTranslate -= mUnitSize;
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::OnMoveOUT()
{
	
	zTranslate += mUnitSize;
	return 0;
}


////////////////////////////////////////////////////////////////////////////////////

TObject::TObject()
{
	mUnitSize = 0.001f;
	rUnitSize = 0.5f;
	onSetRotation(0.0f,0.0f,0.0f);
	OnSetTranslation(0.0,0.0,-5.1);
	RotateAngle = 0.0f;
	IsInitialized = false;
	Destroy = false;
	MouseIsSelected = false;

}

////////////////////////////////////////////////////////////////////////////////////
TObject::~TObject()
{
}


////////////////////////////////////////////////////////////////////////////////////
float TObject::OnRotateNegX()
{

	if(RotateAngle <-360)
	{
		RotateAngle = 0;
	}
	RotateAngle -= rUnitSize;
	xRotate = 1.0f;
	return RotateAngle;
}


////////////////////////////////////////////////////////////////////////////////////

float TObject::OnRotateNegY()
{
	
	if(RotateAngle < -360)
	{
		RotateAngle = 0;
	}
	RotateAngle -= rUnitSize;
	yRotate = 1.0f;

	return RotateAngle;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::OnRotateNegZ()
{
	
	if(RotateAngle < -360)
	{
		RotateAngle = 0;
	}
	RotateAngle -= rUnitSize;
	zRotate = 1.0f;

	return RotateAngle;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::OnRotatePosX()
{
	

	if(RotateAngle >360)
	{
		RotateAngle = 0;
	}
	RotateAngle += rUnitSize;
	xRotate = 1.0f;
	return RotateAngle;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::OnRotatePosY()
{
	
	if(RotateAngle >360)
	{
		RotateAngle = 0;
	}
	RotateAngle += rUnitSize;
	yRotate = 1.0f;

	return RotateAngle;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::OnRotatePosZ()
{
	
	if(RotateAngle > 360)
	{
		RotateAngle = 0;
	}
	RotateAngle += rUnitSize;
	zRotate = 1.0f;

	return RotateAngle;
}

////////////////////////////////////////////////////////////////////////////////////

void TObject::SetName(std::string arg)
{
	Name=arg;
	ConString4Screen(arg);
}

////////////////////////////////////////////////////////////////////////////////////
bool TObject::ConString4Screen(std::string arg)
{
	Label = Name.c_str();
	
	return true;
}

////////////////////////////////////////////////////////////////////////////////////

std::string TObject::GetName()
{
	
	return Name;
}

////////////////////////////////////////////////////////////////////////////////////

void TObject::SetrUnitSize(float arg)
{
	rUnitSize = arg;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::GetrUnitSize()
{
	return rUnitSize;
}

////////////////////////////////////////////////////////////////////////////////////

void TObject::SetmUnitSize(float arg)
{
	mUnitSize = arg;
}




////////////////////////////////////////////////////////////////////////////////////

bool TObject::onSetRotation(float x, float y, float z)
{

	xRotate = x;
	yRotate = y;
	zRotate = z;

	return true;
}

////////////////////////////////////////////////////////////////////////////////////
bool TObject::OnSetTranslation(float x, float y, float z)
{
	xTranslate = x;
	yTranslate = y;
	zTranslate = z;

	return true;
}


////////////////////////////////////////////////////////////////////////////////////

const char * TObject::GetLabel()
{
	return Label;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::GetxRotate()
{
	return xRotate;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::GetyRotate()
{
	return yRotate;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::GetzRotate()
{
	return zRotate;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::GetxTranslation()
{
	return xTranslate;
}

////////////////////////////////////////////////////////////////////////////////////

float TObject::GetyTranslation()
{
	return yTranslate;
}

////////////////////////////////////////////////////////////////////////////////////
float TObject::GetzTranslation()
{
	return zTranslate;
}

////////////////////////////////////////////////////////////////////////////////////

bool TObject::GetIsSelected()
{
	return MouseIsSelected;
}

////////////////////////////////////////////////////////////////////////////////////

void TObject::SetIsSelected(bool arg)
{
	if(arg!= true && arg!=false)
	{
		arg = false;
	}

	MouseIsSelected = arg;
}

////////////////////////////////////////////////////////////////////////////////////

void TObject::SetSpawnCount(int arg)
{
	if(arg<1)
	{
		arg = 1;
	}

	SpawnCount = arg;
}

////////////////////////////////////////////////////////////////////////////////////

int TObject::GetSpawnCount()
{
	return SpawnCount;
}
///////////////////////////////////////////////////////////////////////////////////

bool TObject::CheckLogicTimer(float arg)
{
	NewTime = EngineTime.CalcTimePassed();

	float ElapsedTime = NewTime - OldTime;

	if(OldTime==0)
	{
		OldTime=NewTime;
		return false;
	}
	
		if(ElapsedTime >= arg)
		{
			updatelogic = true;
			OldTime = NewTime;
		}

		else
		{
			updatelogic = false;
		}
	
	

	return updatelogic;
}

///////////////////////////////////////////////////////////////////////////////////

bool TObject::CheckControlTimer(float arg)
{
	C_NewTime = EngineTime.CalcTimePassed();

	float ElapsedTime = C_NewTime - C_OldTime;

	if(C_OldTime != 0)
	{
		if(ElapsedTime >= arg)
		{
			update_c_logic = true;
		}

		else
		{
			update_c_logic = false;
		}
	}
	
	C_OldTime = C_NewTime;

	return update_c_logic;
}

///////////////////////////////////////////////////////////////////////////////////

void TObject::SetIsCollide(bool arg)
{
	if(arg != true && arg != false)
	{
		arg = false;
	}

	isCollide_able = arg;
}


///////////////////////////////////////////////////////////////////////////////////

bool TObject::GetIsCollide()
{
	return isCollide_able;
}

///////////////////////////////////////////////////////////////////////////////////

float TObject::GetmUnitSize()
{
	return mUnitSize;
}